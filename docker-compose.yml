version: '3.8'

services:
  # === 1. API GATEWAY ===
  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    ports:
      - "3003:3003"
    env_file:
      - .env
    environment:
      - PORT=3003
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - auth
      - product
      - order
    restart: always
    networks:
      - microservice-net

  # === 2. AUTH SERVICE ===
  auth:
    build: ./auth
    container_name: auth
    ports:
      - "3000:3000"
    env_file:
      - .env
    environment:
      - MONGO_URI=${MONGO_URI_AUTH}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      auth-db:
        condition: service_healthy
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservice-net

  # === 3. PRODUCT SERVICE ===
  product:
    build: ./product
    container_name: product
    ports:
      - "3001:3001"
    env_file:
      - .env
    environment:
      - MONGO_URI=${MONGO_URI_PRODUCT}
      - RABBITMQ_URI=${RABBITMQ_URI}
    depends_on:
      product-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservice-net

  # === 4. ORDER SERVICE ===
  order:
    build: ./order
    container_name: order
    ports:
      - "3002:3002"
    env_file:
      - .env
    environment:
      - MONGO_URI=${MONGO_URI_ORDER}
      - RABBITMQ_URI=${RABBITMQ_URI}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      order-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservice-net

  # === 5. RABBITMQ ===
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 5s
      timeout: 5s
      retries: 15
    restart: always
    networks:
      - microservice-net

  # === 6. MONGODB DATABASES ===
  auth-db:
    image: mongo:6
    container_name: auth-db
    ports:
      - "27018:27017"
    volumes:
      - auth-db-data:/data/db
    command: ["mongod", "--bind_ip_all"]
    restart: always
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservice-net

  product-db:
    image: mongo:6
    container_name: product-db
    ports:
      - "27019:27017"
    volumes:
      - product-db-data:/data/db
    command: ["mongod", "--bind_ip_all"]
    restart: always
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservice-net

  order-db:
    image: mongo:6
    container_name: order-db
    ports:
      - "27020:27017"
    volumes:
      - order-db-data:/data/db
    command: ["mongod", "--bind_ip_all"]
    restart: always
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservice-net

# === 7. VOLUMES & NETWORKS ===
volumes:
  auth-db-data:
  product-db-data:
  order-db-data:

networks:
  microservice-net:
    driver: bridge
